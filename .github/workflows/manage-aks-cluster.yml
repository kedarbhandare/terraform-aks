name: Manage AKS Cluster

on:
  workflow_dispatch:
    inputs:
      organizationName:
        description: 'The name of your Organization. Terraform organizations let you manage organizations, projects, and teams.'
        required: true
      email:
        description: 'Email of user/owner' 
        required: true
      projectName:
        description: 'The name of your Project. Terraform projects let you manage resources and permissions.'  
        required: true
      workspaceName:
        description: 'The name of your workspace. Terraform workspaces let you manage environment-specific configurations.'
        required: true
      resourceGroupName:
        description: 'The name of your Azure Resource Group'  
        required: true
      clusterName:
        description: 'The name of your AKS cluster'
        required: true
      region:
        description: 'The Azure region where the cluster will be deployed'
      action:
        description: 'Action to perform (apply/destroy)'

jobs:
  apply_cluster:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      run: terraform init
      working-directory: Terraform
    - name: Terraform Format
      run: terraform fmt
      working-directory: Terraform
    - name: Terraform Validate
      run: terraform validate
      working-directory: Terraform
    - name: Terraform Apply
      run: terraform apply -var tfe_token=${{ secrets.TF_API_TOKEN }} -var subscription_id=${{ secrets.subscription_id }} -var email=${{ github.event.inputs.email }} -var projectName=${{ github.event.inputs.projectName }} -var resourceGroupName=${{ github.event.inputs.resourceGroupName }} -var clusterName=${{ github.event.inputs.clusterName }} -var region=${{ github.event.inputs.region }} -auto-approve
      working-directory: Terraform

  destroy_cluster:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      run: terraform init
      working-directory: Terraform
    - name: Terraform FMT
      run: terraform fmt
      working-directory: Terraform
    - name: Terraform Validate
      run: terraform validate
      working-directory: Terraform
    - name: Terraform Destroy
      run: terraform destroy -var tfe_token=${{ secrets.TF_API_TOKEN }} -var subscription_id=${{ secrets.subscription_id }} -var email=${{ github.event.inputs.email }} -var projectName=${{ github.event.inputs.projectName }} -var resourceGroupName=${{ github.event.inputs.resourceGroupName }} -var clusterName=${{ github.event.inputs.clusterName }} -var region=${{ github.event.inputs.region }} -auto-approve
      working-directory: Terraform
